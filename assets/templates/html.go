// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/intersects.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\xaa\xad\xe5\xe2\xb4\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xe4\xaa\xae\x4e\xcd\x4b\xa9\xad\xe5\x02\x04\x00\x00\xff\xff\x2e\x51\x58\x45\x30\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 48, mode: os.FileMode(420), modTime: time.Unix(1585356530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\xb1\x4e\xc4\x30\x0c\x86\xe7\xe6\x29\x8c\xf7\x6b\x5e\x20\xcd\x02\xcc\x30\xb0\x30\xa1\xd0\xba\x97\x1c\x69\x1a\xc5\x16\x50\x55\x7d\x77\xd4\x0b\x43\x87\x9b\x90\x58\x92\xe8\xcf\xa7\xcf\xbf\xe4\x75\x1d\x68\x0c\x89\x00\x43\xea\xdf\x3c\xb9\x01\xb7\x4d\x99\xbb\x87\xa7\xfb\x97\xd7\xe7\x47\xf0\x32\x45\xab\xcc\x7e\x41\x74\xe9\xdc\x21\x25\xb4\xaa\x31\x3b\x6a\x15\x00\x40\xb3\x1f\x46\x82\x44\xb2\xe7\xf9\xf4\xe5\x67\x9e\xd3\x18\x0a\xcb\x89\xb3\x93\xe0\xa2\xd1\xf5\x57\x55\x94\xfb\x12\xb2\x80\x2c\x99\x3a\x14\xfa\x16\x7d\x71\x9f\xae\xa6\x08\x5c\xfa\x0e\x0f\x89\xe6\x18\x72\x5e\x26\x97\xdb\xbe\xcc\xcc\xde\x85\xc2\xed\x85\xd1\x1a\x5d\x89\x3f\x7a\x0f\x45\xdb\xdf\xa2\xad\xcb\xe1\xbf\xd4\x93\xcb\xb7\x6b\xc7\x90\x3e\xa0\x50\xec\x90\x65\x89\xc4\x9e\x48\xf0\x38\xaa\x67\x46\xf0\x85\xc6\x0e\xf7\xf7\x4d\xfb\x95\xd1\xf6\x6a\x54\x8d\xd1\x75\x3d\x8d\x79\x9f\x87\xc5\xaa\x75\xa5\x34\x6c\x9b\xfa\x09\x00\x00\xff\xff\x7a\x9f\xf9\x7a\xee\x01\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 494, mode: os.FileMode(420), modTime: time.Unix(1585676360, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIntersectsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xdb\x92\x9b\x30\x0c\x7d\x0e\x5f\xa1\xd1\x73\x13\x7e\x00\xf8\x95\x8e\x82\x45\x51\x6a\x6c\x8f\x25\xb2\xcd\x30\xfb\xef\x1d\x43\xd8\x92\xdd\xf6\xad\x6f\xc7\xe7\xe8\xc2\x91\xd0\xb2\x80\xe3\x41\x02\x03\x4a\x30\xce\xca\xbd\x29\xc2\xfb\x7b\xb5\x2c\x60\x3c\x25\x4f\xb6\x6a\xfd\xf7\x91\xc9\x21\x5c\x8a\xd6\x38\xb9\x43\xef\x49\xb5\xc5\x3e\x06\x23\x09\x9c\xb1\xab\x00\x00\x8e\x5a\x8e\x6f\xd8\x55\xa7\xea\x74\x5a\x59\x71\x2d\x4e\x94\xb0\x6b\x6a\x27\xf7\xee\x48\xab\x91\xcd\x8a\x5d\xa3\x89\xc2\xca\xf4\x31\x66\x57\x98\xba\x50\x7f\x49\xb9\xcd\x53\x3a\x5b\x3c\x0f\x31\x4f\xa5\xcb\x09\xa0\x29\x78\x83\x00\x8d\x84\x34\x1b\xd8\x23\x71\x8b\xc6\xbf\x0c\x21\xd0\xc4\x7f\x12\x3d\x99\x8f\x01\x5f\x8a\xed\x5c\xf2\xd4\xf3\x18\xbd\xe3\xbc\x89\x60\x11\x3c\xd9\xb7\x55\xbd\x93\x9f\xb9\x45\x84\xfa\xa3\xd9\x75\x36\x8b\x61\x37\x7e\xb5\x00\x57\x0b\xe7\x94\x65\xa2\xfc\xc0\xe7\x57\xe8\x7c\x9d\xc4\x5e\x3b\x6e\x89\xd8\x95\x77\x53\x6f\xaf\xa7\x9b\x7a\xb7\xf3\xd5\x7c\x66\x9d\xbd\xe9\xee\x7b\xf6\xdb\xcc\x28\x38\x71\x64\xac\x67\x2f\x6a\x65\x78\xb3\x7f\x0d\xf9\xd8\xb2\x84\x1f\x9f\x82\x9e\x5d\xb6\x2d\x6e\x78\xa7\x1a\x2f\xe1\x27\x64\xf6\x65\x53\x0f\xcf\x3a\x32\x1b\x1e\x66\x5b\xf7\xaa\x08\x63\xe6\xa1\xc5\x82\xeb\xb7\x31\x6a\x0c\x83\x64\xb5\x8b\x26\x32\x21\x7f\x49\x92\x2e\x6b\x5c\xdd\x55\x8d\xf6\x59\xd2\x71\x3d\xf5\x8d\xee\xb4\xb1\x08\x9a\xfb\x16\x0f\xcc\x3f\xeb\xdd\xb6\x5f\x64\x0d\xfa\x7f\x55\x25\x88\x7d\x2a\xfd\xf5\x20\x86\x18\xed\x79\x10\xcb\x02\x1c\x5c\x41\xbf\x03\x00\x00\xff\xff\xa4\x3c\x6e\xac\x51\x03\x00\x00")

func templatesHtmlIntersectsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIntersectsHtml,
		"templates/html/intersects.html",
	)
}

func templatesHtmlIntersectsHtml() (*asset, error) {
	bytes, err := templatesHtmlIntersectsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/intersects.html", size: 849, mode: os.FileMode(420), modTime: time.Unix(1585676355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/intersects.html": templatesHtmlIntersectsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"intersects.html": &bintree{templatesHtmlIntersectsHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

