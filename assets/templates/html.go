// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/index.html
// templates/html/pip.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\xaa\xad\xe5\xe2\xe4\xb4\xd1\x4f\xc9\x2c\xb3\xe3\xe2\xb4\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xe4\xaa\xae\x4e\xcd\x4b\xa9\xad\xe5\x02\x04\x00\x00\xff\xff\x39\xe9\x08\xde\x39\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 57, mode: os.FileMode(420), modTime: time.Unix(1585680005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x3f\x8f\xdb\x30\x0c\xc5\xe7\xf8\x53\xa8\x9c\x6b\xbb\xdd\x3a\x58\x5e\x7a\x37\xb7\x43\x97\x4e\x05\x2b\x31\x31\xaf\xb2\x24\x88\xbc\xa4\x81\xe1\xef\x5e\xd8\x49\x0a\xdf\xe1\xa6\x43\x16\xff\xa1\xa8\xdf\x7b\x90\xf8\xa6\xc9\xd3\x9e\x23\x19\xe0\xe8\x7e\x0d\x84\x1e\xe6\xb9\xea\x3e\x3c\x7c\xfb\xfa\xe3\xe7\xf7\x47\x33\xe8\x18\xfa\xaa\x5b\x5e\x26\x60\x3c\x58\xa0\x08\x7d\x65\x8c\x31\xdd\xd2\xdd\x57\xbb\x6e\x24\x45\xe3\x06\x2c\x42\x6a\xe1\x59\xf7\xf5\x17\xe8\xab\xdd\xda\xb3\xae\x45\x1c\xc9\xc2\x91\xe9\x94\x53\x51\x30\x2e\x45\xa5\xa8\x16\x4e\xec\x75\xb0\x9e\x8e\xec\xa8\x5e\x7f\x3e\x1a\x8e\xac\x8c\xa1\x16\x87\x81\xec\xe7\xe6\x13\xf4\xbb\x55\xef\x02\x54\xd6\x40\xfd\x21\xd5\xa7\x21\x49\x8a\x7b\x2e\xa2\xb5\x64\x5c\xf6\x74\xed\x65\xf5\xaa\x2d\xae\x70\x56\xa3\xe7\x4c\x16\x94\xfe\x6a\xfb\x84\x47\xbc\x54\xc1\x48\x71\x16\x36\x95\x56\x02\xe7\x7c\x1e\x31\x37\xae\x24\x91\x01\xb9\x48\xf3\x24\xd0\x77\xed\xa5\xe3\x9d\xdc\x90\x1c\x86\x7d\x2a\x78\xa0\x66\xe4\xf8\x12\xb9\x12\xdf\xc7\xdd\x1c\x40\x13\x49\xef\x61\x75\x8b\x7c\x2e\xfc\x86\xd5\x3b\xf9\xbd\x5e\x58\x83\x99\xef\xed\xfb\x86\x1e\x31\xbf\xba\xbe\xdd\xfd\xe0\xcb\x90\xbe\x84\x6f\xce\x25\x70\xfc\x63\x0a\x05\x0b\xa2\xe7\x40\x32\x10\x29\x6c\xe5\x9c\x08\x98\xa1\xd0\xde\xc2\xf2\xfd\xa6\xc2\xda\xd3\xde\xe6\xa3\x6b\x6f\x61\xfb\x9d\xfc\xd9\x78\x54\xac\xd7\x07\x45\x9f\x13\x2f\x59\x9a\x26\xd3\x3c\xa0\xe2\xe3\xb5\x62\xe6\xf9\x7f\x0a\x3d\x1f\x8d\x0b\x28\x62\x61\xc9\x1e\x72\xa4\x02\x57\xf6\x34\x51\xf4\xf3\x5c\xfd\x0b\x00\x00\xff\xff\x80\x7a\x22\x9a\x0a\x04\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 1034, mode: os.FileMode(420), modTime: time.Unix(1585872496, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x49\xad\x50\x52\xa8\xad\xe5\xaa\xae\x56\x28\x49\xcd\x2d\xc8\x49\x2c\x01\x0b\x27\xc7\x67\xa4\x26\xa6\x28\x29\xe8\x81\xe4\x14\x14\x14\x14\x6c\x52\x32\xcb\x14\x92\x73\x12\x8b\x8b\x6d\x95\x8a\xf2\xcb\x95\xec\xb8\x20\xc2\xfa\x29\x99\x65\x76\x5c\x98\xda\xd3\xf2\xf3\x4b\xa0\xda\xab\xab\x15\x52\xf3\x52\x40\x2c\x40\x00\x00\x00\xff\xff\x28\xc9\x55\xba\x7a\x00\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 122, mode: os.FileMode(420), modTime: time.Unix(1585680041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlPipHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x96\xcf\xaf\xe3\x26\x10\xc7\xcf\xf6\x5f\x31\x45\x7b\x5c\xe2\x7b\x65\xfb\x58\xa9\x52\x55\xf5\xdc\xcb\x8a\x98\x49\x32\x6f\x31\x20\x18\xa7\x2f\xb5\xf2\xbf\x57\x60\x27\x8f\xfc\xd8\x55\x5f\xd5\x43\x5f\x6f\xf0\xe5\x3b\xc3\xf0\x31\x16\x33\xcf\xa0\x71\x47\x16\x41\x78\x47\x96\xc9\x7a\x67\x4e\x7b\x67\x05\x9c\xcf\xf5\x3c\x03\xe3\xe8\x8d\x62\x04\x41\x76\xf8\x72\x40\xa5\x05\x6c\xd2\x5a\x6b\xd5\xb1\xaf\x01\x00\xda\x1f\xa4\x5c\x06\x3b\x17\xc6\xbe\xae\x5a\xb2\x7e\x62\xe0\x93\xc7\x4e\x30\xbe\xb2\x00\xab\x46\xec\xc4\xcb\x34\x7a\xc9\x4e\x1a\xc5\x26\x6d\x41\xfa\x51\xf3\x46\x0d\x78\x70\x46\x63\x58\x16\x81\x1d\x18\xc5\x9f\xf3\xea\x51\x99\x09\x3b\x21\xa0\x49\xfb\x6c\x27\x66\x67\x61\x30\x2a\xc6\x4e\x6c\xd9\xc2\x96\xad\xf4\x81\x46\x15\x4e\x62\x2d\x20\x4e\xdb\x91\xf8\x76\xb3\x25\x50\xf4\x69\xde\x36\xcb\x6c\x3d\x4c\xb3\x1c\x22\x8d\xa5\xec\xeb\xb6\xc9\xe7\xac\xab\x56\xd3\xf1\xb2\xd3\xa0\x82\x5e\x12\x66\x68\x92\xac\xbc\x62\xd3\x8a\x95\x24\x4b\x4c\xca\xa4\x43\x11\x4f\x1a\x3b\x31\xcf\xb0\xf9\x79\x51\x7f\x59\x45\x38\x9f\xef\xed\xce\xee\x9f\xf8\x2f\xea\x63\xc0\x9f\xce\x8d\x37\xde\xdf\x9d\x1b\xb3\x2d\x95\x9c\xcf\x93\xca\x4e\x95\x8e\xca\x8b\xb2\x7e\xb9\x75\xfa\x24\xfa\xb6\xd1\x74\xec\x0b\x6f\x69\xd9\x39\xc7\x18\x44\xca\x55\xb5\x1a\x59\x91\x89\x7d\x5d\x2d\xe6\x38\x8d\x09\x73\xff\x13\x19\xc6\x10\xdb\xe6\x22\x5c\x0c\x45\xb6\xc4\x54\x0e\x07\x1c\xbe\xc2\xdb\x50\x92\x35\x64\x51\xa4\x80\xcb\x9d\x79\xf0\xcb\x45\xbf\xe7\x2c\x77\x79\xd7\x6f\xe9\x12\x5f\x29\x32\xda\x84\xe4\x72\x0f\x72\xba\xad\x7b\x5d\x3e\x1c\xc5\x2f\xc3\x14\x02\x5a\xbe\x5e\xaa\x42\x5a\x4a\x32\x6a\x8b\xe6\x49\x49\x59\x17\xe9\x24\xb7\x41\x14\x61\x1d\xb7\x4d\xf6\x5c\x51\xac\x90\x3f\x06\x17\x8d\x3e\xe0\xa0\x18\x75\x89\xa6\x50\xdf\x45\xa7\x8c\xa3\x08\x6f\xd3\x0f\xcd\x68\x40\x15\x6f\xf9\xac\xca\xfb\x6e\xce\x1a\x93\x2e\x4e\x1e\x7e\x8f\xc9\x47\x41\x13\x27\x8f\x21\xa2\xbe\xc5\x53\xa8\xef\x42\x54\xc6\x51\x84\xb7\xe9\xff\x09\x15\xd9\xfd\x33\x56\x49\xfe\x47\xb0\x72\x60\x41\x8b\xec\xfe\x39\xae\x75\x36\xcf\x10\x94\xdd\x23\x7c\xa2\xcf\xf0\xc9\x33\xfc\xd8\xc1\xe6\xb7\xf4\x10\xa7\xc2\x23\x9c\xcf\x55\x55\xfd\x17\xa0\xfa\x4b\x4d\xcf\x91\xe6\xe5\x93\x47\x39\xcf\xe9\x18\x9b\x5f\xd5\xb8\x3c\x9a\x2b\xdb\x3b\xf9\xef\xb3\xbd\xee\x7b\x9f\xb9\xbf\x9d\x7f\xef\x52\xce\x33\xa0\xd5\xa9\x75\xaa\xaa\xb6\x29\x5e\xd3\xfa\xc6\x7b\xfd\x32\x0f\x0d\x47\x7f\xf7\xa2\x7b\xf2\x32\x60\x9c\x0c\xc7\x67\x2f\x7b\x7e\xb3\x0b\xeb\xa8\x78\x38\x60\x4c\x4f\xfe\x64\xfa\xfc\x3d\x6f\xd6\x07\x65\x35\x69\xc5\x57\x4b\x59\xd7\xfa\x5b\x5d\x8a\xac\x5b\x43\xf6\x2b\x04\x34\x9d\x88\x7c\x32\x18\x0f\x88\x2c\x8a\x96\xaf\x19\x62\x14\x70\x08\xb8\xeb\x44\x1a\x37\x7f\x1c\x5c\x74\x76\x47\x21\xf2\x26\x7a\x95\xfe\x8b\x8d\x27\xbf\xc9\xbe\xa6\xaf\xdb\x38\x04\xf2\x65\xd7\xd8\xbc\xa8\xa3\x5a\x54\x01\x31\x0c\x9d\x28\x94\x6f\xe6\x7b\xc9\xe5\x2f\xa6\x7f\x2f\x6b\x6a\xb8\xee\x52\x3f\x76\xc7\xa9\x5d\x5a\xbb\xe3\xb7\x8f\xfd\x57\x00\x00\x00\xff\xff\x69\x43\x6b\x9b\x62\x0b\x00\x00")

func templatesHtmlPipHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlPipHtml,
		"templates/html/pip.html",
	)
}

func templatesHtmlPipHtml() (*asset, error) {
	bytes, err := templatesHtmlPipHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/pip.html", size: 2914, mode: os.FileMode(420), modTime: time.Unix(1585950184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
	"templates/html/pip.html": templatesHtmlPipHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
			"pip.html": &bintree{templatesHtmlPipHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

