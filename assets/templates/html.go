// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/intersects.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\xaa\xad\xe5\xe2\xb4\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xe4\xaa\xae\x4e\xcd\x4b\xa9\xad\xe5\x02\x04\x00\x00\xff\xff\x2e\x51\x58\x45\x30\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 48, mode: os.FileMode(420), modTime: time.Unix(1585356530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xb1\x4e\xc4\x30\x0c\x86\xe7\xe6\x29\x4c\xf6\x6b\x5e\x20\xcd\x02\xcc\x30\xb0\x30\x21\xd3\xfa\xae\x3e\xa5\x49\x14\x5b\x40\x55\xf5\xdd\x51\x09\xc3\x89\x91\xc5\x96\x7e\x7f\xfa\xf4\x7b\xdb\x26\x3a\x73\x22\xb0\x9c\xc6\xb7\x99\x70\xb2\xfb\x6e\xfc\xdd\xc3\xd3\xfd\xcb\xeb\xf3\x23\xcc\xba\xc4\x60\xfc\xb1\x20\x62\xba\x0c\x96\x92\x0d\xa6\xf3\x07\x1a\x0c\x00\x40\x77\x0c\xaf\xac\x91\xc2\x25\x9f\x3e\xe7\x2c\x39\x9d\xb9\x8a\x9e\xa4\xa0\x32\x46\xef\xda\xd5\x34\x54\xc6\xca\x45\x41\xd7\x42\x83\x55\xfa\x52\x77\xc5\x0f\x6c\xa9\x05\xa9\xe3\x60\x6f\x12\x27\x91\x4b\x59\x17\x2c\xfd\x58\xb3\xc8\x8c\x5c\xa5\xbf\x8a\x0d\xde\x35\xe2\x9f\xde\x9b\xa2\xfd\x6f\xd1\x7e\xc1\xf2\xc7\xfd\xa3\x36\x9d\x77\xed\xe1\xce\xbf\xe7\x69\x0d\x66\xdb\x28\x4d\xfb\x6e\xbe\x03\x00\x00\xff\xff\x36\xca\x48\x38\x40\x01\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 320, mode: os.FileMode(420), modTime: time.Unix(1585674856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIntersectsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x5b\x92\x9c\x30\x0c\xfc\x1e\x4e\xa1\xd2\x77\x06\x2e\x00\x5c\x25\xa5\xc1\x22\x68\x63\x6c\x97\x25\x66\x33\x45\xed\xdd\x53\x86\x61\xc3\x64\x93\xbf\x76\xb7\x1e\x6e\x49\xeb\x0a\x8e\x47\x09\x0c\x28\xc1\x38\x2b\x0f\xa6\x08\x1f\x1f\xd5\xba\x82\xf1\x9c\x3c\xd9\xa6\x0d\xdf\x27\x26\x87\x50\x17\xad\x75\x72\x87\xc1\x93\x6a\x87\x43\x0c\x46\x12\x38\x63\x5f\x01\x00\x9c\xb5\x1c\xdf\xb1\xaf\x2e\xd5\xe5\xb2\xb1\xe2\x3a\x9c\x29\x61\xdf\x36\x4e\xee\xfd\x99\x56\x23\x5b\x14\xfb\x56\x13\x85\x8d\x19\x62\xcc\xae\x30\x4d\xa1\xfe\x91\xf2\xb6\xcc\xe9\x6a\xf1\x3a\xc6\x3c\x97\x2e\x17\x80\xb6\xe0\x1d\x02\xb4\x12\xd2\x62\x60\x8f\xc4\x1d\x1a\xff\x32\x84\x40\x33\xff\x49\xf4\x64\x3e\x06\x7c\x29\x76\x70\xc9\xd3\xc0\x53\xf4\x8e\xf3\x2e\x82\x45\xf0\x64\xdf\x36\xf5\x4e\x7e\xe1\x0e\x11\x9a\xcf\x66\xb7\xc5\x2c\x86\xc3\xf8\xcd\x02\xdc\x2c\x5c\x53\x96\x99\xf2\x03\x9f\xbf\xd0\xe5\x36\x8b\xbd\x76\xdc\x13\xb1\x2f\xef\xb6\xd9\x5f\x4f\x37\xcd\x61\xe7\xab\xf9\xcc\xba\x78\xd3\xc3\xf7\xe2\xf7\x99\x51\x70\xe2\xc8\x58\xaf\x5e\xd4\xca\xf0\x16\xff\x1a\xf2\xb9\x65\x09\x3f\xfe\x0a\x7a\x76\xd9\xb7\xb8\xe3\x83\x6a\xbd\x84\x9f\x90\xd9\x97\x4d\x3d\x3c\xeb\xc4\x6c\x78\x9a\x6d\x33\xa8\x22\x4c\x99\xc7\x0e\x0b\x6e\xde\xa7\xa8\x31\x8c\x92\xd5\x6a\x4d\x64\x42\xbe\x4e\x92\xea\x2d\xae\xe9\xb7\xa1\x55\xad\x0e\x59\xd2\x79\x47\xcd\x1b\xdd\x69\x67\x11\x34\x0f\x1d\x9e\x98\xff\x16\x95\x20\x56\xbf\xed\xc7\xb2\x45\xf6\xd5\xd7\xfb\x1d\x63\xb4\xe7\xfd\xae\x2b\x70\x70\x05\xfd\x0e\x00\x00\xff\xff\x41\xcd\x59\x84\x00\x03\x00\x00")

func templatesHtmlIntersectsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIntersectsHtml,
		"templates/html/intersects.html",
	)
}

func templatesHtmlIntersectsHtml() (*asset, error) {
	bytes, err := templatesHtmlIntersectsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/intersects.html", size: 768, mode: os.FileMode(420), modTime: time.Unix(1585674860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/intersects.html": templatesHtmlIntersectsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"intersects.html": &bintree{templatesHtmlIntersectsHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

