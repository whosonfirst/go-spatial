// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\xaa\xad\xe5\xe2\xb4\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xe4\xaa\xae\x4e\xcd\x4b\xa9\xad\xe5\x02\x04\x00\x00\xff\xff\x2e\x51\x58\x45\x30\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 48, mode: os.FileMode(420), modTime: time.Unix(1585356530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcf\xb1\x6e\xf4\x20\x0c\x07\xf0\x19\x9e\xc2\x1f\xfb\xc1\x0b\x10\x96\xaf\x9d\xdb\xa1\x4b\xa7\x8a\x12\xe7\xf0\x95\x00\xc2\xa8\x55\x1a\xe5\xdd\xab\x88\xa5\xaa\x74\x93\x25\xfb\x6f\xeb\xe7\x7d\x9f\x71\xa1\x8c\xa0\x28\x87\xb7\x88\x7e\x56\xc7\x21\xed\xbf\x87\xa7\xff\x2f\xaf\xcf\x8f\x10\xfb\x9a\x9c\xb4\x67\x81\xe4\xf3\x75\x52\x98\x95\x93\xc2\x9e\x51\x27\x01\x00\x84\xb0\x9d\x7a\x42\x77\x2d\x97\xaf\x58\xb8\xe4\x85\x1a\xf7\x4b\xa5\x6a\xcd\x98\x08\x21\x85\xb0\x1c\x1a\xd5\x0e\xdc\xc2\xa4\xcc\xcd\x7f\xfa\xd1\x30\x9c\xa8\xd6\x6d\xf5\x55\x87\x56\x98\xa3\xa7\xc6\xfa\xc6\xca\x59\x33\x12\x4e\x8e\x03\x89\xf2\x07\x34\x4c\x93\xe2\xbe\x25\xe4\x88\xd8\x15\xc4\x86\xcb\xa4\x4c\x60\x36\xab\xaf\xdf\x98\xf5\x2f\x85\xae\x54\x75\x60\x3e\xcd\xf7\x05\x77\xf6\xfe\x18\xac\x19\x4f\x0b\xfb\x5e\xe6\xcd\xc9\x7d\xc7\x3c\x1f\x87\xfc\x09\x00\x00\xff\xff\x80\x00\xdc\x19\x44\x01\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 324, mode: os.FileMode(420), modTime: time.Unix(1585356538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\x4b\x6e\xeb\x30\x0c\x5c\xe7\x9d\x82\xe0\xfa\xa5\xbe\x80\xe2\xab\x14\x8c\x45\x37\x2a\xa8\x0f\x2c\xca\x68\x21\xe4\xee\x85\xfc\x49\xeb\xa6\x3b\x72\x86\xe4\x90\x9c\x5a\xc1\xf2\xe8\x02\x03\xba\xa0\x3c\x65\x1e\x34\x23\xdc\xef\xff\x6a\x05\x65\x9f\x84\x74\xe1\x86\xd7\x1b\x93\x45\x78\x69\xdc\xe9\x64\xac\x9b\xc1\xd9\x0b\x7a\x4a\xd8\x9b\xce\xba\xb9\xff\x09\x67\x25\x2d\x19\x7b\x93\x13\x85\x05\x19\x62\x9c\x6c\x43\xba\x06\xfd\xd1\xf2\x5e\x7c\x3a\x6b\x3c\x8f\x71\xf2\xd8\x18\x00\xd3\xe2\x35\x04\x30\x2e\xa4\xa2\xa0\x9f\x89\x2f\xa8\xfc\xa1\x08\x81\x3c\x7f\x37\x0a\xa9\xc4\x80\x87\x61\x3b\x96\x84\x06\xbe\x45\xb1\x3c\xad\x24\x68\x04\x21\xfd\xbf\xb0\x33\x49\xe1\x0b\x22\x74\x0f\xb1\x6b\x51\x8d\x61\x53\xcb\xe5\xea\x9d\x1e\x27\xaf\x05\xd8\xb7\xdc\x74\x6b\xb6\x6d\xdd\xed\x6b\x3f\x1f\x39\x71\x2e\xa2\x79\xbf\xaf\xc8\xfa\x1b\x0a\xd6\x59\x52\xce\x67\x71\x59\xdb\x93\x8a\x1c\x4b\x1e\xee\xb8\xf0\xf6\xab\x68\x53\x79\x32\x6c\x8c\x51\x37\xc3\x6a\x05\x0e\xb6\x45\x5f\x01\x00\x00\xff\xff\xd0\x03\xbf\x30\xf1\x01\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 497, mode: os.FileMode(420), modTime: time.Unix(1585610517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

