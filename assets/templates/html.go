// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/intersects.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\xaa\xad\xe5\xe2\xb4\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xe4\xaa\xae\x4e\xcd\x4b\xa9\xad\xe5\x02\x04\x00\x00\xff\xff\x2e\x51\x58\x45\x30\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 48, mode: os.FileMode(420), modTime: time.Unix(1585356530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\x8b\x31\x0e\xc2\x30\x0c\x00\x67\xfb\x15\x26\x7b\xd5\x0f\x98\x2c\xc0\x0c\x03\x0b\x13\x0a\xc4\x6d\x23\x05\x07\x11\x4b\x08\x45\xf9\x3b\xaa\x3a\xdd\x70\x77\xad\x45\x99\x92\x0a\xb9\xa4\xcf\xfb\x22\x21\xba\xde\x91\x77\xc7\xf3\xe1\x7a\xbb\x9c\x68\xb1\x57\xf6\xc8\x2b\x28\x07\x9d\xf7\x4e\xd4\x79\x04\x5e\x53\x8f\x44\x44\x00\x6c\xc9\xb2\xf8\xb9\x0c\xdf\xa5\xd4\xa2\x53\xfa\x54\x1b\xea\x3b\x58\x0a\x99\xc7\xcd\x02\x20\xf0\xb8\x6d\xc0\x8f\x12\x7f\x1e\x5b\x13\x8d\xbd\xe3\x3f\x00\x00\xff\xff\x9d\xad\x4f\x20\x86\x00\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 134, mode: os.FileMode(420), modTime: time.Unix(1585612348, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIntersectsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\x5d\x72\xb3\x30\x0c\x7c\x86\x53\x68\xf4\xfc\xf1\x71\x01\xe0\x2a\x1d\x81\x95\xc6\x1d\x23\x7b\x6c\x39\x6d\x86\xc9\xdd\x3b\xe6\x27\x4d\x9a\xbe\xad\x77\x25\x96\x95\xb4\x2c\x60\xf8\x64\x85\x01\xad\x28\xc7\xc4\x93\x26\x84\xdb\xad\x5e\x16\x50\x9e\x83\x23\x5d\xb5\xe9\xed\xcc\x64\x10\xfe\x17\xad\x33\xf6\x02\x93\xa3\x94\x7a\x9c\xbc\x28\x59\xe1\x88\x43\x0d\x00\xf0\xa8\x45\xff\x89\x43\x5d\xd5\x55\xb5\xb2\xd6\xf4\x38\x53\xc0\xa1\x6b\x8d\xbd\x0c\x8f\x74\x52\xd2\x9c\x70\xe8\x52\x20\x59\x99\xc9\xfb\x68\x0a\xd3\x16\xea\x8f\x96\x8f\x3c\x87\x46\x7d\x73\xf2\x71\x2e\x2e\x15\x40\x57\xf0\x06\x01\x3a\x2b\x21\x2b\xe8\x35\x70\x8f\xca\x5f\x8a\x20\x34\xf3\x4f\xa3\x23\x75\x5e\xf0\xe9\x63\x07\x17\x1c\x4d\x7c\xf6\xce\x70\xdc\x44\x50\x0f\x8e\xf4\xdf\xaa\x5e\xc8\x65\xee\x11\xa1\xbd\x9b\x8d\x59\xd5\xcb\x11\x7c\x54\x81\x51\xa5\x09\xd1\xce\x14\xaf\xb8\xff\x45\xca\xe3\x6c\xf5\xd9\x71\x6b\xc4\xa1\xbc\xbb\x76\x7b\xed\x69\xda\x23\xce\x6b\xf8\xc8\x29\x3b\x4d\x47\xee\xec\xb6\x99\x91\x18\x6b\x48\x39\x35\xce\x26\x2d\xc3\xcb\xee\xb9\xe4\xbe\x65\x2b\xef\xbf\x8a\x76\x97\x6d\x8b\x1b\x3e\xa8\x97\x63\x38\x79\xaf\xfb\x31\x2c\x0b\xb0\x98\x82\xbe\x03\x00\x00\xff\xff\x32\x54\x93\xe6\x4d\x02\x00\x00")

func templatesHtmlIntersectsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIntersectsHtml,
		"templates/html/intersects.html",
	)
}

func templatesHtmlIntersectsHtml() (*asset, error) {
	bytes, err := templatesHtmlIntersectsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/intersects.html", size: 589, mode: os.FileMode(420), modTime: time.Unix(1585612539, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/intersects.html": templatesHtmlIntersectsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"intersects.html": &bintree{templatesHtmlIntersectsHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

