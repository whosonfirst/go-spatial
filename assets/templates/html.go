// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/index.html
// templates/html/pip.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\xaa\xad\xe5\xe2\xe4\xb4\xd1\x4f\xc9\x2c\xb3\xe3\xe2\xb4\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xe4\xaa\xae\x4e\xcd\x4b\xa9\xad\xe5\x02\x04\x00\x00\xff\xff\x39\xe9\x08\xde\x39\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 57, mode: os.FileMode(420), modTime: time.Unix(1585680005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x31\x8f\xd4\x30\x10\x85\xeb\xcd\xaf\x30\x53\x93\x04\x3a\x8a\x38\x0d\x50\x43\x41\x43\x85\x06\x67\xb2\x9e\xc3\xb1\x2d\xcf\xdc\x2e\xab\xd5\xfe\x77\x94\xec\x46\xca\xa1\xab\x4e\xa9\x12\xdb\xcf\xdf\x7b\x1a\xcf\x5c\xaf\x03\x8d\x1c\xc9\x00\x47\xf7\xcb\x13\x0e\x70\xbb\x55\xdd\xbb\x2f\xdf\x3e\xff\xf8\xf9\xfd\xab\xf1\x3a\x85\xbe\xea\xe6\x8f\x09\x18\x8f\x16\x28\x42\x5f\x19\x63\x4c\x37\xab\xfb\xea\xd0\x4d\xa4\x68\x9c\xc7\x22\xa4\x16\x9e\x75\xac\x3f\x41\x5f\x1d\x16\xcd\x72\x16\x71\x22\x0b\x27\xa6\x73\x4e\x45\xc1\xb8\x14\x95\xa2\x5a\x38\xf3\xa0\xde\x0e\x74\x62\x47\xf5\xb2\x78\x6f\x38\xb2\x32\x86\x5a\x1c\x06\xb2\x1f\x9b\x0f\xd0\x1f\x16\xbf\x3b\x50\x59\x03\xf5\xc7\x54\x9f\x7d\x92\x14\x47\x2e\xa2\xb5\x64\x9c\xef\x74\xed\xfd\xf4\xe1\x2d\xae\x70\x56\xa3\x97\x4c\x16\x94\xfe\x6a\xfb\x84\x27\xbc\xef\x82\x91\xe2\x2c\x6c\x76\x5a\x09\x9c\xf3\x65\xc2\xdc\xb8\x92\x44\x3c\x72\x91\xe6\x49\xa0\xef\xda\xbb\xe2\x8d\xdc\x90\x1c\x86\x31\x15\x3c\x52\x33\x71\x7c\x89\x5c\x88\x6f\xe3\x6e\x0a\xd0\x44\xd2\x3d\xa2\x6e\x91\xcf\x85\x5f\x89\xba\x53\xde\xc7\x83\x35\x98\x79\xef\xdc\x2b\x7a\xc2\xfc\xdf\xf3\x1d\xf6\x83\xcf\x4d\xfa\x12\xbe\xa9\x4b\xe0\xf8\xc7\x14\x0a\x16\x44\x2f\x81\xc4\x13\x29\x6c\xed\x9c\x08\x18\x5f\x68\xb4\x30\xff\xbf\xea\xb0\x68\xda\xb5\x3f\xba\x76\x1d\xb6\xdf\x69\xb8\xac\x55\x1a\xf8\x64\x5c\x40\x11\x0b\xf3\x48\x21\x47\x2a\xf0\xb8\x72\xbd\x52\x1c\x6e\xb7\xea\x5f\x00\x00\x00\xff\xff\x02\xed\xf7\x2c\xe1\x03\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 993, mode: os.FileMode(420), modTime: time.Unix(1585768175, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x49\xad\x50\x52\xa8\xad\xe5\xaa\xae\x56\x28\x49\xcd\x2d\xc8\x49\x2c\x01\x0b\x27\xc7\x67\xa4\x26\xa6\x28\x29\xe8\x81\xe4\x14\x14\x14\x14\x6c\x52\x32\xcb\x14\x92\x73\x12\x8b\x8b\x6d\x95\x8a\xf2\xcb\x95\xec\xb8\x20\xc2\xfa\x29\x99\x65\x76\x5c\x98\xda\xd3\xf2\xf3\x4b\xa0\xda\xab\xab\x15\x52\xf3\x52\x40\x2c\x40\x00\x00\x00\xff\xff\x28\xc9\x55\xba\x7a\x00\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 122, mode: os.FileMode(420), modTime: time.Unix(1585680041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlPipHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x41\x8e\xdb\x30\x0c\x3c\xdb\xaf\x60\x79\xae\xe2\x0f\xc8\xba\x17\xe8\x0b\x7a\x29\x18\x4b\x59\x73\x2b\x4b\x82\x44\xa7\x4d\x8d\xfc\xbd\x90\xed\x5d\x24\xde\xf6\xd6\x53\xe8\xe1\x68\x86\xc3\x48\xcb\x02\xd6\x5d\x38\x38\xc0\x14\x39\x08\x87\x14\xfd\xed\x25\x06\x84\xfb\xbd\x5d\x16\x10\x37\x25\x4f\xe2\x00\x39\x0c\xdf\x47\x47\x16\xe1\x54\x7b\x3a\xd0\xd5\xb4\x00\x00\xfa\x93\x52\x5b\x71\x89\x79\x32\x6d\xa3\x39\xa4\x59\x40\x6e\xc9\xf5\x28\xee\x97\x20\x04\x9a\x5c\x8f\xaf\xf3\x94\x94\x44\xe5\x49\x7c\xb5\x60\xfb\x11\x4b\x9e\x06\x37\x46\x6f\x5d\xde\x9a\x20\x11\x3c\xc9\xe7\xb5\x7b\x25\x3f\xbb\x1e\x11\xba\xea\x73\x9e\x45\x62\x80\xc1\x53\x29\x3d\x9e\x25\xc0\x59\x82\x4a\x99\x27\xca\x37\xdc\x07\x28\xf3\x79\x62\x79\x36\xdb\x0e\xa2\xa9\xdf\xba\xdb\xbe\xf6\x30\xdd\x16\xa2\xd6\x4a\x99\x56\x77\x6b\xce\xb6\xd1\x96\xaf\x6f\x4e\x03\x65\xbb\x09\xae\x4b\x53\x1c\xd4\xfb\xda\x2c\x09\x29\x0e\x2c\x4c\xbe\x86\x62\x99\xad\xeb\x71\x59\xe0\xf4\x65\x43\xbf\xee\x20\xdc\xef\x47\x7a\x0c\x2f\x7f\xe1\xbf\xa1\x1f\x0f\xfc\x8e\x71\x7a\xe2\x7e\x8b\x71\x5a\x69\xa6\x6d\xd6\x38\x75\xea\x3a\x68\x11\x92\xb9\xe0\x63\x02\x55\xff\x4d\x97\xd1\xe8\x92\x28\xac\xac\x21\xc6\x6c\x0b\x1a\xdd\x55\xc8\xe8\xce\xf2\xd5\xac\x42\x07\xb9\x89\xd2\xb3\xd6\x39\xda\x1b\xee\x07\x0e\xdc\xc4\x49\x65\x57\x66\x2f\x07\xff\x4b\x8c\x52\xfd\xdb\xa6\x79\x22\x4f\x24\xc3\xe8\xd6\x31\x66\x6f\x9a\xe6\xd8\x1f\x28\x58\xb6\x24\xef\x94\xdd\x70\x37\xdf\x7f\x5b\xed\x39\xfc\x80\xec\x7c\x4d\x7f\xf3\xae\x8c\xce\x09\x3e\x5c\xcb\x6e\x28\x05\x61\xcc\xee\xd2\x63\xad\xbb\x9f\x63\x2c\x31\x5c\x38\x17\x39\x95\x44\x75\xa1\xa7\xc4\xe9\xb4\xf2\x3a\xd3\xea\x32\x64\x4e\x8f\x37\xbb\x7b\xa5\x2b\x6d\x28\x42\xc9\x43\x8f\x0f\xc8\x3f\xf5\x5e\xb7\x15\xaf\xa4\xff\xa7\x5a\x2f\xc5\x41\xfa\xe3\x0b\xae\x3b\xdf\x5f\xf0\xb2\x80\x0b\xb6\x56\x7f\x02\x00\x00\xff\xff\xd9\x78\x0a\xa0\x06\x04\x00\x00")

func templatesHtmlPipHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlPipHtml,
		"templates/html/pip.html",
	)
}

func templatesHtmlPipHtml() (*asset, error) {
	bytes, err := templatesHtmlPipHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/pip.html", size: 1030, mode: os.FileMode(420), modTime: time.Unix(1585869700, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
	"templates/html/pip.html": templatesHtmlPipHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
			"pip.html": &bintree{templatesHtmlPipHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

