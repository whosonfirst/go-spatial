// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/index.html
// templates/html/pip.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\xaa\xad\xe5\xe2\xe4\xb4\xd1\x4f\xc9\x2c\xb3\xe3\xe2\xb4\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xe4\xaa\xae\x4e\xcd\x4b\xa9\xad\xe5\x02\x04\x00\x00\xff\xff\x39\xe9\x08\xde\x39\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 57, mode: os.FileMode(420), modTime: time.Unix(1585680005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x31\x8f\xd4\x30\x10\x85\xeb\xcd\xaf\x30\x53\x93\x04\x3a\x8a\x38\x0d\x50\x43\x41\x43\x85\x06\x67\xb2\x9e\xc3\xb1\x2d\xcf\xdc\x2e\xab\xd5\xfe\x77\x94\xec\x46\xca\xa1\xab\x4e\xa9\x12\xdb\xcf\xdf\x7b\x1a\xcf\x5c\xaf\x03\x8d\x1c\xc9\x00\x47\xf7\xcb\x13\x0e\x70\xbb\x55\xdd\xbb\x2f\xdf\x3e\xff\xf8\xf9\xfd\xab\xf1\x3a\x85\xbe\xea\xe6\x8f\x09\x18\x8f\x16\x28\x42\x5f\x19\x63\x4c\x37\xab\xfb\xea\xd0\x4d\xa4\x68\x9c\xc7\x22\xa4\x16\x9e\x75\xac\x3f\x41\x5f\x1d\x16\xcd\x72\x16\x71\x22\x0b\x27\xa6\x73\x4e\x45\xc1\xb8\x14\x95\xa2\x5a\x38\xf3\xa0\xde\x0e\x74\x62\x47\xf5\xb2\x78\x6f\x38\xb2\x32\x86\x5a\x1c\x06\xb2\x1f\x9b\x0f\xd0\x1f\x16\xbf\x3b\x50\x59\x03\xf5\xc7\x54\x9f\x7d\x92\x14\x47\x2e\xa2\xb5\x64\x9c\xef\x74\xed\xfd\xf4\xe1\x2d\xae\x70\x56\xa3\x97\x4c\x16\x94\xfe\x6a\xfb\x84\x27\xbc\xef\x82\x91\xe2\x2c\x6c\x76\x5a\x09\x9c\xf3\x65\xc2\xdc\xb8\x92\x44\x3c\x72\x91\xe6\x49\xa0\xef\xda\xbb\xe2\x8d\xdc\x90\x1c\x86\x31\x15\x3c\x52\x33\x71\x7c\x89\x5c\x88\x6f\xe3\x6e\x0a\xd0\x44\xd2\x3d\xa2\x6e\x91\xcf\x85\x5f\x89\xba\x53\xde\xc7\x83\x35\x98\x79\xef\xdc\x2b\x7a\xc2\xfc\xdf\xf3\x1d\xf6\x83\xcf\x4d\xfa\x12\xbe\xa9\x4b\xe0\xf8\xc7\x14\x0a\x16\x44\x2f\x81\xc4\x13\x29\x6c\xed\x9c\x08\x18\x5f\x68\xb4\x30\xff\xbf\xea\xb0\x68\xda\xb5\x3f\xba\x76\x1d\xb6\xdf\x69\xb8\xac\x55\x1a\xf8\x64\x5c\x40\x11\x0b\xf3\x48\x21\x47\x2a\xf0\xb8\x72\xbd\x52\x1c\x6e\xb7\xea\x5f\x00\x00\x00\xff\xff\x02\xed\xf7\x2c\xe1\x03\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 993, mode: os.FileMode(420), modTime: time.Unix(1585768175, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x49\xad\x50\x52\xa8\xad\xe5\xaa\xae\x56\x28\x49\xcd\x2d\xc8\x49\x2c\x01\x0b\x27\xc7\x67\xa4\x26\xa6\x28\x29\xe8\x81\xe4\x14\x14\x14\x14\x6c\x52\x32\xcb\x14\x92\x73\x12\x8b\x8b\x6d\x95\x8a\xf2\xcb\x95\xec\xb8\x20\xc2\xfa\x29\x99\x65\x76\x5c\x98\xda\xd3\xf2\xf3\x4b\xa0\xda\xab\xab\x15\x52\xf3\x52\x40\x2c\x40\x00\x00\x00\xff\xff\x28\xc9\x55\xba\x7a\x00\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 122, mode: os.FileMode(420), modTime: time.Unix(1585680041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlPipHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x41\xb2\xdb\x20\x0c\x5d\xdb\xa7\x50\xb5\xae\xc3\x05\x30\x57\xe9\x28\xa0\xd4\xa4\x18\x18\x90\xd3\x66\x3c\xff\xee\x1d\x6c\xb7\x93\xf8\x4f\x77\x5d\x59\x3c\x3d\xbd\x87\x64\xb4\xae\xe0\xf8\xe6\x23\x03\xe6\xe4\xa3\xf8\x98\x53\x78\x7e\x4f\x11\xe1\xe3\xa3\x5f\x57\x10\x9e\x73\x20\x61\x40\x1f\xed\xb7\x89\xc9\x21\x5c\x5a\x4e\x47\x7a\x98\x1e\x00\x40\x7f\x19\x86\x3d\xb8\xa5\x32\x9b\xbe\xd3\x3e\xe6\x45\x40\x9e\x99\x47\x14\xfe\x25\x08\x91\x66\x1e\xf1\xbe\xcc\x79\x90\x34\x04\x92\xd0\x2c\xbc\xfb\x8c\xe5\x40\x96\xa7\x14\x1c\x97\x3d\x09\x92\x20\x90\x7c\xdd\xb2\x0f\x0a\x0b\x8f\x88\xa0\x9a\xcf\x75\x11\x49\x11\x6c\xa0\x5a\x47\xbc\x4a\x84\xab\xc4\x21\x17\x3f\x53\x79\xe2\x71\x81\xba\x5c\x67\x2f\xef\x66\x7b\x21\x9a\x76\xd6\x6a\x3f\x1d\xcd\xa8\xbd\x89\x16\x0f\x83\xe9\xb5\xda\xfa\xec\x3b\xed\xfc\xe3\x8f\x93\xa5\xe2\xd0\xf4\xdd\x56\xd0\xf0\xa6\x5d\x85\x64\xa9\xf8\xca\x19\xda\xbc\xb8\xa0\xd1\x35\x53\xdc\x58\x36\xa5\xe2\x2a\x1a\xad\x1a\x64\xb4\x72\xfe\x61\x36\xa1\x93\xdc\x4c\xf9\x5d\xeb\x9a\xdc\x13\x8f\x82\x13\x37\xfb\x3c\x14\xae\x4b\x90\x93\xff\x2d\x25\x69\xfe\x7d\xd7\xbd\x91\x67\x12\x3b\xf1\x76\x8d\x25\x98\xae\x3b\xe7\x2d\x45\xe7\x1d\xc9\x5f\xca\x61\x78\x98\x1f\xdf\x5e\x07\x1f\x7f\x40\xe1\xd0\xba\x7f\x06\xae\x13\xb3\xe0\xcb\x8f\x57\xb6\x56\x84\xa9\xf0\x6d\xc4\x16\xab\x9f\x53\xaa\x29\xde\x7c\xa9\x72\xa9\x99\xc4\x53\xb8\x64\x9f\x2f\x1b\x4f\x99\x5e\x57\x5b\x7c\x7e\x7d\x3b\xea\x4e\x0f\xda\x51\x84\x5a\xec\x88\x2f\xc8\x3f\xf5\xee\xfb\x88\x37\xd2\xff\x53\xf5\xd1\xcb\x49\xfa\xf3\x8e\xb4\x99\x1f\x3b\xb2\xae\xc0\xd1\xb5\xe8\x77\x00\x00\x00\xff\xff\xf9\x67\x9d\x57\x68\x03\x00\x00")

func templatesHtmlPipHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlPipHtml,
		"templates/html/pip.html",
	)
}

func templatesHtmlPipHtml() (*asset, error) {
	bytes, err := templatesHtmlPipHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/pip.html", size: 872, mode: os.FileMode(420), modTime: time.Unix(1585769533, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
	"templates/html/pip.html": templatesHtmlPipHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
			"pip.html": &bintree{templatesHtmlPipHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

