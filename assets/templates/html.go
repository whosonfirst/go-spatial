// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/index.html
// templates/html/pip.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\xaa\xad\xe5\xe2\xe4\xb4\xd1\x4f\xc9\x2c\xb3\xe3\xe2\xb4\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xe4\xaa\xae\x4e\xcd\x4b\xa9\xad\xe5\x02\x04\x00\x00\xff\xff\x39\xe9\x08\xde\x39\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 57, mode: os.FileMode(420), modTime: time.Unix(1585680005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x3f\x8f\xdb\x30\x0c\xc5\xe7\xf8\x53\xa8\x9c\x6b\xbb\xdd\x3a\x58\x5e\x7a\x37\xb7\x43\x97\x4e\x05\x2b\x31\x31\xaf\xb2\x24\x88\xbc\xa4\x81\xe1\xef\x5e\xd8\x49\x0a\xdf\xe1\xa6\x43\x16\xff\xa1\xa8\xdf\x7b\x90\xf8\xa6\xc9\xd3\x9e\x23\x19\xe0\xe8\x7e\x0d\x84\x1e\xe6\xb9\xea\x3e\x3c\x7c\xfb\xfa\xe3\xe7\xf7\x47\x33\xe8\x18\xfa\xaa\x5b\x5e\x26\x60\x3c\x58\xa0\x08\x7d\x65\x8c\x31\xdd\xd2\xdd\x57\xbb\x6e\x24\x45\xe3\x06\x2c\x42\x6a\xe1\x59\xf7\xf5\x17\xe8\xab\xdd\xda\xb3\xae\x45\x1c\xc9\xc2\x91\xe9\x94\x53\x51\x30\x2e\x45\xa5\xa8\x16\x4e\xec\x75\xb0\x9e\x8e\xec\xa8\x5e\x7f\x3e\x1a\x8e\xac\x8c\xa1\x16\x87\x81\xec\xe7\xe6\x13\xf4\xbb\x55\xef\x02\x54\xd6\x40\xfd\x21\xd5\xa7\x21\x49\x8a\x7b\x2e\xa2\xb5\x64\x5c\xf6\x74\xed\x65\xf5\xaa\x2d\xae\x70\x56\xa3\xe7\x4c\x16\x94\xfe\x6a\xfb\x84\x47\xbc\x54\xc1\x48\x71\x16\x36\x95\x56\x02\xe7\x7c\x1e\x31\x37\xae\x24\x91\x01\xb9\x48\xf3\x24\xd0\x77\xed\xa5\xe3\x9d\xdc\x90\x1c\x86\x7d\x2a\x78\xa0\x66\xe4\xf8\x12\xb9\x12\xdf\xc7\xdd\x1c\x40\x13\x49\xef\x61\x75\x8b\x7c\x2e\xfc\x86\xd5\x3b\xf9\xbd\x5e\x58\x83\x99\xef\xed\xfb\x86\x1e\x31\xbf\xba\xbe\xdd\xfd\xe0\xcb\x90\xbe\x84\x6f\xce\x25\x70\xfc\x63\x0a\x05\x0b\xa2\xe7\x40\x32\x10\x29\x6c\xe5\x9c\x08\x98\xa1\xd0\xde\xc2\xf2\xfd\xa6\xc2\xda\xd3\xde\xe6\xa3\x6b\x6f\x61\xfb\x9d\xfc\xd9\x78\x54\xac\xd7\x07\x45\x9f\x13\x2f\x59\x9a\x26\xd3\x3c\xa0\xe2\xe3\xb5\x62\xe6\xf9\x7f\x0a\x3d\x1f\x8d\x0b\x28\x62\x61\xc9\x1e\x72\xa4\x02\x57\xf6\x34\x51\xf4\xf3\x5c\xfd\x0b\x00\x00\xff\xff\x80\x7a\x22\x9a\x0a\x04\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 1034, mode: os.FileMode(420), modTime: time.Unix(1585872496, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x49\xad\x50\x52\xa8\xad\xe5\xaa\xae\x56\x28\x49\xcd\x2d\xc8\x49\x2c\x01\x0b\x27\xc7\x67\xa4\x26\xa6\x28\x29\xe8\x81\xe4\x14\x14\x14\x14\x6c\x52\x32\xcb\x14\x92\x73\x12\x8b\x8b\x6d\x95\x8a\xf2\xcb\x95\xec\xb8\x20\xc2\xfa\x29\x99\x65\x76\x5c\x98\xda\xd3\xf2\xf3\x4b\xa0\xda\xab\xab\x15\x52\xf3\x52\x40\x2c\x40\x00\x00\x00\xff\xff\x28\xc9\x55\xba\x7a\x00\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 122, mode: os.FileMode(420), modTime: time.Unix(1585680041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlPipHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4f\x6f\xdb\x3e\x0c\x3d\xdb\x9f\x82\x3f\xa1\xc7\x3a\x3e\xfc\x6e\x83\xed\xe3\x80\x01\xc3\xb0\xf3\x2e\x85\x62\x31\x09\x5b\x59\x12\x24\x3a\x6b\x66\xe4\xbb\x0f\x92\x9d\xc4\xf9\xb3\x02\xeb\x8a\x6e\x37\x92\x7e\x7a\x7a\x8f\x12\x4c\x0d\x03\x28\x5c\x91\x41\x10\xce\x92\x61\x32\xce\xea\xdd\xda\x1a\x01\xfb\x7d\x3e\x0c\xc0\xd8\x39\x2d\x19\x41\x90\x69\x1f\x36\x28\x95\x80\x45\xfc\x56\x19\xb9\x6d\x72\x00\x80\xea\xbf\xa2\x18\x83\x95\xf5\x5d\x93\x67\x15\x19\xd7\x33\xf0\xce\x61\x2d\x18\x9f\x59\x80\x91\x1d\xd6\xe2\xb1\xef\x5c\xc1\xb6\xd0\x92\x75\xdc\x82\xd4\x75\xcd\x69\xd9\xe2\xc6\x6a\x85\x7e\xfc\x08\x6c\x41\x4b\xbe\x4f\x5f\xb7\x52\xf7\x58\x0b\x01\x65\xdc\x67\xd9\x33\x5b\x03\xad\x96\x21\xd4\x62\xc9\x06\x96\x6c\x0a\xe7\xa9\x93\x7e\x27\x26\x01\xa1\x5f\x76\xc4\xe7\x9b\x8d\x0b\x45\x13\xf3\xaa\x1c\xb3\xc9\x4c\x39\x9a\x88\x71\x51\x34\x79\x55\x26\x9f\x79\x56\x29\xda\x1e\x76\x6a\xa5\x57\x23\x61\x6a\x5a\x41\xa6\x38\xb6\x4d\x49\x96\x05\x19\x62\x92\x3a\x9a\x22\xee\x15\xd6\x62\x18\x60\xf1\x69\xac\x7e\x9e\x8a\xb0\xdf\x5f\xc2\xad\x59\xdf\xc0\x1f\xaa\xd7\x0b\x7e\x58\xdb\x9d\x61\xbf\x59\xdb\x25\x58\x94\x9c\xfc\x44\xd9\x51\x69\x27\x9d\x98\xeb\x2f\x96\x56\xed\x44\x53\x95\x8a\xb6\xcd\x0c\x3b\x87\xac\xac\x65\xf4\x22\x72\x65\x95\x42\x96\xa4\x43\x93\x67\x23\x38\xf4\x5d\x6c\x73\xf3\x91\x34\xa3\x0f\x55\x79\x28\x1c\x00\x33\xb6\xd8\xd3\xa2\xdd\x60\xfb\x04\xa7\xb0\x20\xa3\xc9\xa0\x88\x0b\x0e\x77\xe6\x0a\x5f\xa4\xfa\xe1\x2c\x53\x69\x69\x9f\xc7\xe6\x53\x78\x68\x7b\xef\xd1\xf0\xf1\x62\xc4\x43\x4d\x74\x5a\x2e\x51\xdf\xa0\x4b\x75\x11\x55\x9c\xad\x6f\x28\xc0\x14\x57\x65\xc2\x1c\x6d\x4c\x0d\x7a\x3f\x4f\x0a\x9d\xc7\x56\x32\xaa\x57\xdb\x9a\x51\x44\x67\xa7\xf4\xaf\x9b\x6b\x51\x86\x3f\x30\x36\x2d\x4f\xc7\x95\xc2\x97\x0c\xbd\xa7\xaf\xd0\x3b\xf4\x01\xd5\xdc\x9b\x63\xb2\xe6\xff\xdf\x33\x38\xe3\x89\x26\x4f\xe9\xbf\x66\x94\xcc\xfa\x6d\x9c\x46\xa2\xb9\x55\x32\xeb\xdb\x5e\xa7\x6c\x18\xc0\x4b\xb3\x46\xb8\xa3\x7b\xb8\x73\x0c\x1f\x6a\x58\x7c\x8d\x53\x23\x2a\x0e\xb0\xdf\x67\x59\xf6\x6e\x1d\x19\x86\xa8\x61\xf1\x45\x76\xe3\xef\xf9\x35\xf7\xfa\x82\xa3\x39\xcf\x5f\x3a\xf8\x61\x00\x34\x2a\x8e\xe3\x2c\xab\xca\xd9\x1f\x3a\x3f\xc3\x1e\x1b\x78\x35\xc4\x9a\x8b\x29\xe1\xc8\x15\x1e\x43\xaf\x39\xdc\x9a\x16\x69\x0e\xcc\xa0\x9d\xe4\x76\x83\x21\x8e\x91\x5e\x37\xa9\xed\x67\xdf\x5b\x69\x14\x29\xc9\x47\xc8\x5c\xd7\x74\x75\x0f\x22\xf3\x4a\x93\x79\x02\x8f\xba\x16\x81\x77\x1a\xc3\x06\xf1\xd8\xf5\xf8\x8c\x28\xdb\x10\x04\x6c\x3c\xae\x6a\x11\xe3\xf2\xfb\xc6\x06\x6b\x56\xe4\x03\x2f\x82\x93\x71\x00\x2e\x1c\xb9\x45\xc2\x95\x4d\x5e\x85\xd6\x93\x9b\xbf\x44\xca\x47\xb9\x95\x63\x55\x40\xf0\x6d\x2d\x66\x95\x5f\xf2\x3d\x26\xf9\x23\xe8\xed\x58\xe3\x10\xbf\xa0\xbe\x7e\x71\xc5\x11\x3c\xbd\xb8\x4e\x87\xfd\x33\x00\x00\xff\xff\x7e\xe0\xa1\x44\xb6\x09\x00\x00")

func templatesHtmlPipHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlPipHtml,
		"templates/html/pip.html",
	)
}

func templatesHtmlPipHtml() (*asset, error) {
	bytes, err := templatesHtmlPipHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/pip.html", size: 2486, mode: os.FileMode(420), modTime: time.Unix(1585935229, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
	"templates/html/pip.html": templatesHtmlPipHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
			"pip.html": &bintree{templatesHtmlPipHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

