// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/index.html
// templates/html/pip.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\xaa\xad\xe5\xe2\xe4\xb4\xd1\x4f\xc9\x2c\xb3\xe3\xe2\xb4\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xe4\xaa\xae\x4e\xcd\x4b\xa9\xad\xe5\x02\x04\x00\x00\xff\xff\x39\xe9\x08\xde\x39\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 57, mode: os.FileMode(420), modTime: time.Unix(1585680005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x3f\x8f\xdb\x30\x0c\xc5\xe7\xf8\x53\xa8\x9c\x6b\xbb\xdd\x3a\x58\x5e\x7a\x37\xb7\x43\x97\x4e\x05\x2b\x31\x31\xaf\xb2\x24\x88\xbc\xa4\x81\xe1\xef\x5e\xd8\x49\x0a\xdf\xe1\xa6\x43\x16\xff\xa1\xa8\xdf\x7b\x90\xf8\xa6\xc9\xd3\x9e\x23\x19\xe0\xe8\x7e\x0d\x84\x1e\xe6\xb9\xea\x3e\x3c\x7c\xfb\xfa\xe3\xe7\xf7\x47\x33\xe8\x18\xfa\xaa\x5b\x5e\x26\x60\x3c\x58\xa0\x08\x7d\x65\x8c\x31\xdd\xd2\xdd\x57\xbb\x6e\x24\x45\xe3\x06\x2c\x42\x6a\xe1\x59\xf7\xf5\x17\xe8\xab\xdd\xda\xb3\xae\x45\x1c\xc9\xc2\x91\xe9\x94\x53\x51\x30\x2e\x45\xa5\xa8\x16\x4e\xec\x75\xb0\x9e\x8e\xec\xa8\x5e\x7f\x3e\x1a\x8e\xac\x8c\xa1\x16\x87\x81\xec\xe7\xe6\x13\xf4\xbb\x55\xef\x02\x54\xd6\x40\xfd\x21\xd5\xa7\x21\x49\x8a\x7b\x2e\xa2\xb5\x64\x5c\xf6\x74\xed\x65\xf5\xaa\x2d\xae\x70\x56\xa3\xe7\x4c\x16\x94\xfe\x6a\xfb\x84\x47\xbc\x54\xc1\x48\x71\x16\x36\x95\x56\x02\xe7\x7c\x1e\x31\x37\xae\x24\x91\x01\xb9\x48\xf3\x24\xd0\x77\xed\xa5\xe3\x9d\xdc\x90\x1c\x86\x7d\x2a\x78\xa0\x66\xe4\xf8\x12\xb9\x12\xdf\xc7\xdd\x1c\x40\x13\x49\xef\x61\x75\x8b\x7c\x2e\xfc\x86\xd5\x3b\xf9\xbd\x5e\x58\x83\x99\xef\xed\xfb\x86\x1e\x31\xbf\xba\xbe\xdd\xfd\xe0\xcb\x90\xbe\x84\x6f\xce\x25\x70\xfc\x63\x0a\x05\x0b\xa2\xe7\x40\x32\x10\x29\x6c\xe5\x9c\x08\x98\xa1\xd0\xde\xc2\xf2\xfd\xa6\xc2\xda\xd3\xde\xe6\xa3\x6b\x6f\x61\xfb\x9d\xfc\xd9\x78\x54\xac\xd7\x07\x45\x9f\x13\x2f\x59\x9a\x26\xd3\x3c\xa0\xe2\xe3\xb5\x62\xe6\xf9\x7f\x0a\x3d\x1f\x8d\x0b\x28\x62\x61\xc9\x1e\x72\xa4\x02\x57\xf6\x34\x51\xf4\xf3\x5c\xfd\x0b\x00\x00\xff\xff\x80\x7a\x22\x9a\x0a\x04\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 1034, mode: os.FileMode(420), modTime: time.Unix(1585872496, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x49\xad\x50\x52\xa8\xad\xe5\xaa\xae\x56\x28\x49\xcd\x2d\xc8\x49\x2c\x01\x0b\x27\xc7\x67\xa4\x26\xa6\x28\x29\xe8\x81\xe4\x14\x14\x14\x14\x6c\x52\x32\xcb\x14\x92\x73\x12\x8b\x8b\x6d\x95\x8a\xf2\xcb\x95\xec\xb8\x20\xc2\xfa\x29\x99\x65\x76\x5c\x98\xda\xd3\xf2\xf3\x4b\xa0\xda\xab\xab\x15\x52\xf3\x52\x40\x2c\x40\x00\x00\x00\xff\xff\x28\xc9\x55\xba\x7a\x00\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 122, mode: os.FileMode(420), modTime: time.Unix(1585680041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlPipHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\xc1\x8e\xdb\x2c\x10\xc7\xcf\xf1\x53\xf0\x71\xfe\x88\x0f\xbd\xda\xbe\x57\xea\x13\xf4\xb2\xc2\x30\x89\x67\x17\x03\x82\x71\xba\xa9\x95\x77\xaf\xc0\x76\xd6\x89\xd3\x43\xb5\xab\x6d\x6f\xc3\xf0\xe7\xcf\xfc\xc0\x1a\x3c\x8e\x4c\xc3\x01\x2d\x30\xee\x1d\x5a\x42\xeb\x9d\x39\x1f\x9d\xe5\xec\x72\x29\xc6\x91\x11\xf4\xde\x48\x02\xc6\xd1\xaa\xa7\x0e\xa4\xe6\x6c\x9f\xe6\x2a\x2b\x4f\x4d\xc1\x18\x63\xd5\x7f\x42\x4c\xc1\xc1\x85\xbe\x29\x76\x15\x5a\x3f\x10\xa3\xb3\x87\x9a\x13\xbc\x12\x67\x56\xf6\x50\xf3\xe7\xa1\xf7\x82\x9c\x30\x92\x4c\xda\x02\xf5\x36\xe7\x8d\x54\xd0\x39\xa3\x21\x4c\x93\x8c\x1c\x33\x92\xfe\xcf\xb3\x27\x69\x06\xa8\x39\x67\x65\xda\xa7\x1d\x88\x9c\x65\xca\xc8\x18\x6b\xde\x92\x65\x2d\x59\xe1\x03\xf6\x32\x9c\xf9\x5c\x40\x1c\xda\x1e\xe9\x76\xb3\x69\x21\x6f\xd2\xb8\x2a\xa7\xd1\x0c\x53\x4e\x10\x29\x16\xa2\x29\xaa\x32\x73\x16\xbb\x4a\xe3\x69\xd9\x49\xc9\xa0\x27\xc3\x7c\x68\x02\xad\xb8\x1e\x9b\x96\x24\x05\x5a\x24\x94\x26\x41\x21\x0d\x1a\x6a\x3e\x8e\x6c\xff\x75\xca\x7e\x9b\x93\xec\x72\xb9\x97\x3b\x7b\x7c\xa0\x5f\xb2\xdb\x05\x3f\x9d\xeb\x6f\xb4\xdf\x9d\xeb\xb3\x2c\x95\x9c\x79\x52\xd9\xa9\xd2\x5e\x7a\xbe\xae\x5f\xb4\x4e\x9f\x79\x53\x95\x1a\x4f\xcd\x4a\xbb\x96\x1c\x9c\x23\x08\x3c\x79\xdd\xf0\xa7\x23\x12\xaa\x03\xf5\xc2\xde\x42\x81\xd6\xa0\x05\xde\x14\xbb\xc9\x6d\xfa\x0a\x36\x4b\x44\xce\x2f\xb7\x93\x53\xad\x7b\x9d\x8e\x13\xe3\x93\x1a\x42\x00\x4b\xd7\xab\x4e\xd7\xb4\x38\x1a\xd9\x82\x79\xe0\x98\xf3\x3c\xd5\x72\x63\xd1\x60\x64\x73\x5c\x95\x59\x93\x9c\x16\xe2\x4f\x23\xd2\xe0\x03\x28\x49\xa0\xdf\x03\xb5\x72\x49\x5c\x6f\xc3\xbf\x89\xa6\x40\xc6\xf7\x61\xcd\x0e\xf9\xaa\x72\xb8\xc5\xf9\x44\x9e\x38\x78\x08\x11\xf4\x9a\xc9\x13\x3a\xfb\xe5\x8f\xc1\x56\x56\x09\xee\x6d\xf8\x4f\x00\xa2\x3d\x7e\x18\x61\xf2\x5a\x23\xa2\x3d\x3e\xfa\x26\xe7\x1e\x33\x0f\xaf\xe8\x9b\xbe\xda\xdc\x35\x2e\x8f\x5e\x04\x88\x83\xa1\xf8\xa8\x81\x2d\x87\xb7\x48\x7b\x49\xaa\x83\x98\x3a\xdb\x60\x9a\xb4\xed\xed\xbc\x92\x56\xa3\x96\x74\x95\xac\xeb\xca\xe1\xb5\xb8\x5d\x51\x19\xb4\x2f\x2c\x80\xa9\x79\xa4\xb3\x81\xd8\x01\x5c\x0f\x37\xbd\x6c\xa5\x8a\x91\xb3\x2e\xc0\xa1\xe6\x29\x2e\x7f\x74\x2e\x3a\x7b\xc0\x10\x69\x1f\xbd\x4c\x3d\x79\xef\xd1\xef\xb3\xae\x6c\x8a\x2a\xaa\x80\x7e\xfd\x38\x96\xcf\xf2\x24\xa7\x2c\x67\x31\xa8\x9a\xaf\x32\xbf\xf5\x7b\xce\xe5\x4f\xa2\x8f\x73\x4d\xef\xca\x9d\xf5\xf6\x27\x20\xbd\x0a\xf3\x4f\xc0\x38\x32\xb0\x3a\x45\xbf\x02\x00\x00\xff\xff\x7a\x6f\x81\x9b\x49\x08\x00\x00")

func templatesHtmlPipHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlPipHtml,
		"templates/html/pip.html",
	)
}

func templatesHtmlPipHtml() (*asset, error) {
	bytes, err := templatesHtmlPipHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/pip.html", size: 2121, mode: os.FileMode(420), modTime: time.Unix(1585874742, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
	"templates/html/pip.html": templatesHtmlPipHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
			"pip.html": &bintree{templatesHtmlPipHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

